import time
import pandas as pd
from bs4 import BeautifulSoup
from prefect import task
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from concurrent.futures import ThreadPoolExecutor, as_completed
from pipelines.utils.credential_injector import authenticated_task as task
from pipelines.utils.logger import log
from pipelines.utils.tasks import upload_df_to_datalake
from pipelines.datalake.extract_load.diario_oficial_uniao.utils import extract_decree_details

# Configura√ß√µes do Web Driver
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--disable-plugins")
chrome_options.add_argument("--disable-extensions")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-images")
chrome_options.add_argument("--page-load-strategy=eager")

@task
def dou_extraction(dou_section: int, max_workers:int, date:datetime) -> list:
    """Tarefa para extra√ß√£o dos dados de atos oficiais do DOU.

    Args:
        dou_section (int): Se√ß√£o do DOU a ser extra√≠da.
        max_workers (int): N√∫mero m√°ximo de workers para execu√ß√£o paralela.
        date (datetime): Data do di√°rio oficial a ser extra√≠do.

    Raises:
        exc: _description_

    Returns:
        list: Lista de dicion√°rios contendo os dados extra√≠dos de cada ato do DOU.
    """
    if not date:
        date = datetime.now()
    
    items = [] # Lista de dicion√°rios com os metadados e informa√ß√µes de cada ato
    page_count = 1
    
    day, month, year = date.day, date.month, date.year

    driver = webdriver.Chrome(options=chrome_options)
    log("ü§ñ Iniciando o webdriver...")
    log(f"Iniciando extra√ß√£o dos atos oficiais do DOU Se√ß√£o {str(dou_section)} de {date.strftime('%d/%m/%Y')}")
    driver.get(f"https://www.in.gov.br/leiturajornal?data={day}-{month}-{year}&secao=do{str(dou_section)}")

    while True:
        # L√≥gica para evitar a polui√ß√£o do log
        if page_count == 1 or page_count % 10 == 0:
            log(f'Extra√ß√£o da p√°gina {page_count}')
            
        cards = driver.find_elements(by=By.CLASS_NAME, value='resultado')

        decree_links_to_process = [] # Lista para armazenar os links dos decretos
        card_metadata = [] # Para armazenar title e outros dados que n√£o dependem da requisi√ß√£o interna

        for card in cards:
            title = card.find_element(by=By.CLASS_NAME, value='title-marker')
            info = card.find_element(by=By.CLASS_NAME, value='breadcrumb-item.publication-info-marker')
            text_link = card.find_element(by=By.TAG_NAME, value='a')

            decree_links_to_process.append(text_link.get_attribute('href'))
            card_metadata.append({
                'title': title.text,
                'info': info.text
            })

        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_url = {executor.submit(extract_decree_details, url): url for url in decree_links_to_process}

            for i, future in enumerate(as_completed(future_to_url)):
                url = future_to_url[future]
                try:
                    decree_details = future.result()
                    # Combinar os metadados do card com os detalhes do decreto
                    combined_item = {**card_metadata[i], **decree_details}
                    items.append(combined_item)
                except Exception as exc:
                    log(f'{url} gerou uma exce√ß√£o: {exc}')
                    raise exc

        pagination_buttons = driver.find_elements(by=By.CLASS_NAME, value='pagination-button')
        next_btn = None

        if pagination_buttons:
            for button in pagination_buttons:
                if "Pr√≥ximo" in button.text:
                    next_btn = button
                                    
        if next_btn:
            next_btn.click()
            page_count += 1
            time.sleep(0.5)
        else:
            break # Chegou na √∫ltima p√°gina da se√ß√£o. Fim da extra√ß√£o

    driver.quit()
    log('‚úÖ Extra√ß√£o finalizada.')
    
    return items
    

@task
def upload_to_datalake(dou_infos: dict, dataset:str, environment: str) -> None:
    """Fun√ß√£o para realizar a carga dos dados extra√≠dos no datalake.

    Args:
        dou_infos (dict): Lista com os dicion√°rios contendo os dados extra√≠dos de cada ato do DOU.
        dataset (str): Dataset do BigQuery onde os dados ser√£o carregados.
        environment (str): 
    """
    df = pd.DataFrame(dou_infos)
    df['_uploaded_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    log(f'Realizando upload no datalake em {dataset}...')
    
    upload_df_to_datalake.run(df=df,
        dataset_id=dataset,
        table_id="diarios_uniao",
        partition_column="_extracted_at",
        if_exists="append",
        if_storage_data_exists="append",
        source_format="csv",
        csv_delimiter=",")
    
    log('‚úÖ Flow finalizado.') 