# -*- coding: utf-8 -*-
# pylint: disable=C0103, C0301
"""
General utilities for vitacare pipelines.
"""
from datetime import datetime, timedelta
from typing import List

from prefect.schedules.clocks import IntervalClock


def generate_dicts(dict_template: dict, ap: list, cnes: dict) -> list:
    """
    Generate a list of dictionaries based on a template dictionary, a list of 'ap' values, and a dictionary of 'cnes' values.

    Args:
        dict_template (dict): The template dictionary to use as a base for generating the dictionaries.
        ap (list): A list of 'ap' values.
        cnes (dict): A dictionary of 'cnes' values, where the keys are 'ap' values and the values are lists of 'cnes' values.

    Returns:
        list: A list of dictionaries generated by combining the template dictionary with each 'ap' and 'cnes' value.
    """  # noqa 501

    dicts = []

    for a in ap:
        for c in cnes[a]:
            dicts.append({**dict_template, **{'ap': a, 'cnes': c}})

    return dicts


def generate_dump_api_schedules(  # pylint: disable=too-many-arguments,too-many-locals
    interval: timedelta,
    start_date: datetime,
    labels: List[str],
    flow_run_parameters: List[dict],
    runs_interval_minutes: int = 2,
    parallel_runs: int = 1,
) -> List[IntervalClock]:
    """
    Generates multiple schedules for vitacare dumping.
    """

    clocks = []
    parallel_runs_counter = 1
    count = 0

    for parameters in flow_run_parameters:
        new_interval = parameters["interval"] if "interval" in parameters else interval

        clocks.append(
            IntervalClock(
                interval=new_interval,
                start_date=start_date + timedelta(minutes=runs_interval_minutes * count),
                labels=labels,
                parameter_defaults=parameters,
            )
        )

        parallel_runs_counter += 1

        if parallel_runs_counter > parallel_runs:
            parallel_runs_counter = 0
            count += 1

    return clocks
