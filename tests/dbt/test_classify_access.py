# -*- coding: utf-8 -*-
# Generated by CodiumAI
# pylint: disable=missing-module-docstring, missing-class-docstring, missing-function-docstring, import-error, line-too-long, unused-import
# flake8: noqa: E501
import pytest

from pipelines.utils.dbt.extensions import classify_access


class TestCodeUnderTest:

    # Classifies access level as "publico" when "dado_pessoal" and "dado_publico" are "sim"
    def test_classify_access_publico(self):
        properties = {
            "config": {
                "labels": {
                    "dado_publico": "sim",
                    "dado_sensivel_saude": "nao",
                    "dado_pessoal": "sim",
                    "dado_anonimizado": "nao",
                }
            }
        }
        result = classify_access(properties)
        assert result == "publico"

    # Returns "interno" when "dado_pessoal" is "sim", "dado_publico" is "nao", "dado_sensivel_saude" is "nao", and "dado_anonimizado" is "sim"
    def test_classify_access_interno(self):
        properties = {
            "config": {
                "labels": {
                    "dado_publico": "nao",
                    "dado_sensivel_saude": "nao",
                    "dado_pessoal": "sim",
                    "dado_anonimizado": "sim",
                }
            }
        }
        result = classify_access(properties)
        assert result == "interno"

    # Returns "confidencial" when "dado_pessoal" is "sim", "dado_sensivel_saude" and "dado_anonimizado" are both "sim" or both "nao"
    def test_classify_access_confidencial(self):
        properties = {
            "config": {
                "labels": {
                    "dado_publico": "nao",
                    "dado_sensivel_saude": "sim",
                    "dado_pessoal": "sim",
                    "dado_anonimizado": "sim",
                }
            }
        }
        result = classify_access(properties)
        assert result == "confidencial"

    # Returns "restrito" when "dado_pessoal" is "sim", "dado_sensivel_saude" is "sim", and "dado_anonimizado" is "nao"
    def test_classify_access_restrito(self):
        properties = {
            "config": {
                "labels": {
                    "dado_publico": "nao",
                    "dado_sensivel_saude": "sim",
                    "dado_pessoal": "sim",
                    "dado_anonimizado": "nao",
                }
            }
        }
        result = classify_access(properties)
        assert result == "restrito"

    # Worst case cenario: returns "restrito" when "dado_publico" is "sim", "dado_sensivel_saude" is "sim", and "dado_anonimizado" is "nao"

    def test_classify_conflict_between_publico_sim_sensivel_sim_anonimizado_nao(self):
        properties = {
            "config": {
                "labels": {
                    "dado_publico": "sim",
                    "dado_sensivel_saude": "sim",
                    "dado_pessoal": "nao",
                    "dado_anonimizado": "nao",
                }
            }
        }
        result = classify_access(properties)
        assert result == "restrito"

    # Returns "nao_definido" when "config" key is missing in properties
    def test_missing_config_returns_nao_definido(self):
        properties = {}
        result = classify_access(properties)
        assert result == "nao_definido"

    # Returns "nao_definido" when "labels" key is missing in properties["config"]
    def test_missing_labels_key_returns_nao_definido(self):
        properties = {"config": {}}
        result = classify_access(properties)
        assert result == "nao_definido"

    # Returns "nao_definido" when any of the keys "dado_publico", "dado_sensivel_saude", "dado_pessoal", or "dado_anonimizado" are missing in labels
    def test_missing_keys_returns_nao_definido(self):
        properties = {
            "config": {
                "labels": {
                    "dado_publico": "sim",
                    "dado_sensivel_saude": "nao",
                    "dado_pessoal": "sim",
                }
            }
        }
        result = classify_access(properties)
        assert result == "nao_definido"
